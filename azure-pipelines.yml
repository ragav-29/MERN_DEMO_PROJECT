trigger: none

variables:
  PROD_DEPLOY_PATH: '/var/www/mern'
  keyVaultName: 'ragav29-key'
  secretName: 'mern-server-env'

stages:
  - stage: BuildAndDeploy
    displayName: 'Build and Deploy MERN Stack on Linux VM'
    jobs:
      - deployment: BuildDeployJob
        displayName: 'Build & Deploy on Linux VM'
        environment:
          name: 'linux-prod'
          resourceName: 'ip-172-31-21-2'
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                # 1Ô∏è‚É£ Checkout repository
                - checkout: self
                  clean: true

                # 2Ô∏è‚É£ Fetch .env from Azure Key Vault
                - task: AzureKeyVault@2
                  inputs:
                    azureSubscription: 'my-connection'
                    KeyVaultName: '$(keyVaultName)'
                    SecretsFilter: '$(secretName)'
                  name: FetchSecrets

                # 3Ô∏è‚É£ Sync repo to VM
                - script: |
                    echo "üìÇ Syncing repo to $(PROD_DEPLOY_PATH)..."
                    sudo mkdir -p $(PROD_DEPLOY_PATH)
                    sudo rsync -av --delete $(Build.SourcesDirectory)/ $(PROD_DEPLOY_PATH)/
                    sudo chown -R ubuntu:ubuntu $(PROD_DEPLOY_PATH)
                  displayName: 'Copy repo to VM'

                # 4Ô∏è‚É£ Write .env file AFTER repo copy
                - script: |
                    echo "‚öôÔ∏è Writing .env file from Key Vault..."
                    sudo mkdir -p $(PROD_DEPLOY_PATH)/server
                    echo "$(mern-server-env)" | tr ' ' '\n' | sudo tee $(PROD_DEPLOY_PATH)/server/.env > /dev/null
                    sudo chown ubuntu:ubuntu $(PROD_DEPLOY_PATH)/server/.env
                  displayName: 'Generate server .env from Key Vault'

                # # 5Ô∏è‚É£ Ensure dependencies (mongo + nginx) are running
                # - script: |
                #     echo "üöÄ Starting infra containers if not running..."
                #     cd $(PROD_DEPLOY_PATH)
                #     sudo docker compose -f docker-compose-prod.yml up -d mongo nginx-proxy letsencrypt
                #   displayName: 'Start Infra Containers (mongo, nginx-proxy, letsencrypt)'


                # 6Ô∏è‚É£ Rollout only backend + frontend (zero downtime)
                - script: |
                    echo "üîÑ Rolling out app services (backend, frontend)..."
                    cd $(PROD_DEPLOY_PATH)
                    sudo docker rollout -f docker-compose-prod.yml backend
                    sudo docker rollout -f docker-compose-prod.yml frontend
                  displayName: 'Rollout Application Containers'
